/*
 * This Spock specification was generated by the Gradle 'init' task.
 */

import org.junit.Before
import org.junit.After
import org.junit.Test
import org.junit.Assert
import com.bosch.pipeliner.BasePipeline
import com.bosch.pipeliner.LoggerDynamic

class ConcreteBasePipeline extends BasePipeline {
   ConcreteBasePipeline(script, Map env, Map ioMap) {
        super(script, [
            // the input keys and their default values for the pipeline, can be
            // overridden by user inputs from either MR message or Jenkins env
            defaultInputs: '''
                key1 = value1
                key2 =  value2
            ''',
            // the keys exposed to the user for modification
            exposed: [
                "key1"
            ],
            // the keys for which pipeline should be parallelized
            parallel: []
        ] as Map, env, ioMap)
    }

    @Override
    void stages(Map testMap) { }
    @Override
    void postParallel(Map stageInput) { }
    @Override
    void postPipeline(Map results) { }
};

class BasePipelineTest {
    ConcreteBasePipeline pip
    @Before
    void setUp() {
         Map env = [
            "pip_key1" : "updatedvalue1",
            "pip_key2" : "updatedValue2"
        ]
        this.pip = new ConcreteBasePipeline(this, env, [:])
    }


    @Test
    void processUserInputtest() {
        
        Map expectedData = [
            "key1" : "updatedvalue1",
            "key2" : "value2"
        ]

        this.pip.processUserInput()
        Assert.assertEquals(expectedData, this.pip.inputs);
    }

    
    @Test
    void testGenerateStageInputs () {
        this.pip.processUserInput()
        List stageInputs = this.pip.generateStageInputs()
        Assert.assertEquals(1, stageInputs.size());
    }
    // Tests the getStageInputs method
    @Test
    void testGetStageInputs() {
        this.pip.processUserInput()
        List stageInputs = this.pip.getStageInputs()
        Assert.assertEquals(1, stageInputs.size());
    }
    
    @Test
    void testSanitizeJobName() {
        this.pip.processUserInput()
        String sanitized = this.pip.sanitizeJobName("e0_domain.prefix.component-name.oncommit.subfolders-looooooooooooooooooooooooong")
        Assert.assertEquals(64, sanitized.size())
    }

    @Test
    void testSanitizeJobNameTrailing() {
        this.pip.processUserInput()
        String sanitized = this.pip.sanitizeJobName("e0_domain.prefix.component-name.oncommit.")
        Assert.assertFalse(sanitized.endsWith("."))

        sanitized = this.pip.sanitizeJobName("e0_domain.prefix.component-name.oncommit-")
        Assert.assertFalse(sanitized.endsWith("-"))

        sanitized = this.pip.sanitizeJobName("e0_domain.prefix.component-name.oncommit_")
        Assert.assertFalse(sanitized.endsWith("_"))
    }

    @Test
    void testSanitizeJobNameTrailingCutoff() {
        this.pip.processUserInput()
        String sanitized = this.pip.sanitizeJobName("e0_domain.prefix.component-name.oncommit.subfolders-looooooooooong.thesewillberemoved")
        Assert.assertFalse(sanitized.endsWith("."))
        Assert.assertEquals(64, sanitized.size())
    }
}